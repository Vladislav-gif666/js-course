{
    // Дан код:

    // var a = 1, b = 1, c, d;
    // c = ++a; alert(c);           // 2
    // d = b++; alert(d);           // 1
    // c = (2+ ++a); alert(c);      // 5
    // d = (2+ b++); alert(d);      // 4
    // alert(a);                    // 3
    // alert(b);                    // 3

    // Почему код даёт именно такие результаты?

    let a = 1, b = 1, c, d;
    c = ++a; alert(c + ' Ответ в коде'); //префиксный инкримент увеличивает -a- на 1 и присваивает -a- 2 а так же -c- 2.
    d = b++; alert(d);           // постфиксный инкримент увеличивает -b- 1 на и присваивает -b- 2 а -d- 1 пред. значение.
    c = (2+ ++a); alert(c);      // выше переменной -a- уже присвоили значение 2 и здесь увеличиваем еще на 1. 2+3=5.
    d = (2+ b++); alert(d);      // в -b- значение 2 увеличивает на 1 но возвращает пред значение 2+2=4.
    alert(a);                    // тут все ясно -а- имеет значение 3
    alert(b);                    // -b- так же имеет значение 3
}

{
    // Чему будет равен x в примере ниже?
    //X имеет значение 5 потому что *= это сокр оператор. полностью код выгледел бы примерно так x = 1 + (a = a *2)
    let a = 2;
    x = 1 + (a *= 2);
     alert(x);
}

{
    // Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
    // если a и b положительные, вывести их разность;
    // если а и b отрицательные, вывести их произведение;
    // если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.


    let a = -9, b = 7;

    if(a > 0 && b > 0) {
        x = a - b;
        alert(x);
    } else if(a < 0 && b < 0) {
        x = a * b;
        alert(x);
    } else if(a < 0 && b > 0 || a > 0 && b < 0) {
        x = a + b;
        alert(x);
    }
}

{
    let a = +prompt('Введите число от 1 до 15');

    switch (a){
        case 1:
            alert(a++);
        case 2:
            alert(a++);
        case 3:
            alert(a++);
        case 4:
            alert(a++);
        case 5:
            alert(a++);
        case 6:
            alert(a++);
        case 7:
            alert(a++);
        case 8:
            alert(a++);
        case 9:
            alert(a++);
        case 10:
            alert(a++);
        case 11:
            alert(a++);
        case 12:
            alert(a++);
        case 13:
            alert(a++);
        case 14:
            alert(a++);
        case 15:
            alert(a++);
    }
}

{
    // Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
    let a = 3, b = 5;
    function plus(a, b) {
         return (a + b);
    }

    function minus(a, b) {
        return (a - b);
    }

    function division(a, b) {
        return (a / b);
    }

    function multiplication(a, b) {
        return (a * b);
    }

    // Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 –
    // значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции
    // выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (использовать switch).

    function mathOperation(a, b, operation){
        switch(operation){
            case 'сложение':
                return (a + b);
                break;
            case 'вычитание':
                return (a - b);
                break;
            case 'деление':
                return (a / b);
                break;
            case 'умножение':
                return (a * b);
                break;
        }
    }
}

{
    let a = null > 0; //false
    console.log(a);
    a = null == 0; //false Не пойму как null может быть 'не больше 0' не равен ему и в то же время 'больше либо равен 0'
    console.log(a);
    a = null >=0; //true
    console.log(a);
}



